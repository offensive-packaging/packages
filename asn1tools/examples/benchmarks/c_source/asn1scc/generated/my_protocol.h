#ifndef GENERATED_ASN1SCC_MY_PROTOCOL_H
#define GENERATED_ASN1SCC_MY_PROTOCOL_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"

#ifdef  __cplusplus
extern "C" {
#endif



typedef struct {    int nCount; 
    
    byte arr[16];
} D;

#define D_REQUIRED_BYTES_FOR_ENCODING       17 
#define D_REQUIRED_BITS_FOR_ENCODING        132
#define D_REQUIRED_BYTES_FOR_ACN_ENCODING   17 
#define D_REQUIRED_BITS_FOR_ACN_ENCODING    132
#define D_REQUIRED_BYTES_FOR_XER_ENCODING   39

void D_Initialize(D* pVal);
flag D_IsConstraintValid(const D* val, int* pErrCode);
#ifndef ERR_D 
#define ERR_D		1001  /*(SIZE(1 .. 16))*/
#endif

typedef struct {    
    D arr[3];
} C_c_a;

#define C_c_a_REQUIRED_BYTES_FOR_ENCODING       50 
#define C_c_a_REQUIRED_BITS_FOR_ENCODING        396
#define C_c_a_REQUIRED_BYTES_FOR_ACN_ENCODING   50 
#define C_c_a_REQUIRED_BITS_FOR_ACN_ENCODING    396
#define C_c_a_REQUIRED_BYTES_FOR_XER_ENCODING   132

void C_c_a_Initialize(C_c_a* pVal);
flag C_c_a_IsConstraintValid(const C_c_a* val, int* pErrCode);
#ifndef ERR_C_c_a 
#define ERR_C_c_a		1002  /*(SIZE(3))*/
#endif

typedef flag E;

#define E_REQUIRED_BYTES_FOR_ENCODING       1 
#define E_REQUIRED_BITS_FOR_ENCODING        1
#define E_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define E_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define E_REQUIRED_BYTES_FOR_XER_ENCODING   20

void E_Initialize(E* pVal);
flag E_IsConstraintValid(const E* val, int* pErrCode);


typedef struct {
    E a;
} C_d;

#define C_d_REQUIRED_BYTES_FOR_ENCODING       1 
#define C_d_REQUIRED_BITS_FOR_ENCODING        1
#define C_d_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define C_d_REQUIRED_BITS_FOR_ACN_ENCODING    1
#define C_d_REQUIRED_BYTES_FOR_XER_ENCODING   31

void C_d_Initialize(C_d* pVal);
flag C_d_IsConstraintValid(const C_d* val, int* pErrCode);


typedef struct {
    enum {
        C_c_NONE,
        C_c_a_PRESENT,
        C_c_b_PRESENT 
    } kind;
    union {
        C_c_a a;
        E b;
    } u; 
} C_c;

#define C_c_REQUIRED_BYTES_FOR_ENCODING       50 
#define C_c_REQUIRED_BITS_FOR_ENCODING        398
#define C_c_REQUIRED_BYTES_FOR_ACN_ENCODING   50 
#define C_c_REQUIRED_BITS_FOR_ACN_ENCODING    398
#define C_c_REQUIRED_BYTES_FOR_XER_ENCODING   135

void C_c_Initialize(C_c* pVal);
flag C_c_IsConstraintValid(const C_c* val, int* pErrCode);
#ifndef ERR_C_c_unknown_choice_index 
#define ERR_C_c_unknown_choice_index		1003  /**/
#endif

typedef asn1SccSint F;

#define F_REQUIRED_BYTES_FOR_ENCODING       4 
#define F_REQUIRED_BITS_FOR_ENCODING        32
#define F_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define F_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define F_REQUIRED_BYTES_FOR_XER_ENCODING   27

void F_Initialize(F* pVal);
flag F_IsConstraintValid(const F* val, int* pErrCode);
#ifndef ERR_F 
#define ERR_F		1004  /*(-2147483648 .. 2147483647)*/
#endif

typedef struct {    int nCount; 
    
    F arr[5];
} C_a_a;

#define C_a_a_REQUIRED_BYTES_FOR_ENCODING       21 
#define C_a_a_REQUIRED_BITS_FOR_ENCODING        163
#define C_a_a_REQUIRED_BYTES_FOR_ACN_ENCODING   21 
#define C_a_a_REQUIRED_BITS_FOR_ACN_ENCODING    163
#define C_a_a_REQUIRED_BYTES_FOR_XER_ENCODING   150

void C_a_a_Initialize(C_a_a* pVal);
flag C_a_a_IsConstraintValid(const C_a_a* val, int* pErrCode);
#ifndef ERR_C_a_a 
#define ERR_C_a_a		1005  /*(SIZE(0 .. 5))*/
#endif

typedef asn1SccUint G;

#define G_REQUIRED_BYTES_FOR_ENCODING       4 
#define G_REQUIRED_BITS_FOR_ENCODING        32
#define G_REQUIRED_BYTES_FOR_ACN_ENCODING   4 
#define G_REQUIRED_BITS_FOR_ACN_ENCODING    32
#define G_REQUIRED_BYTES_FOR_XER_ENCODING   27

void G_Initialize(G* pVal);
flag G_IsConstraintValid(const G* val, int* pErrCode);
#ifndef ERR_G 
#define ERR_G		1006  /*(0 .. 4294967295)*/
#endif

typedef asn1SccSint C_a_c;

#define C_a_c_REQUIRED_BYTES_FOR_ENCODING       1 
#define C_a_c_REQUIRED_BITS_FOR_ENCODING        7
#define C_a_c_REQUIRED_BYTES_FOR_ACN_ENCODING   1 
#define C_a_c_REQUIRED_BITS_FOR_ACN_ENCODING    7
#define C_a_c_REQUIRED_BYTES_FOR_XER_ENCODING   35

void C_a_c_Initialize(C_a_c* pVal);
flag C_a_c_IsConstraintValid(const C_a_c* val, int* pErrCode);
#ifndef ERR_C_a_c 
#define ERR_C_a_c		1007  /*(-40 .. 40)*/
#endif

typedef struct {
    C_a_a a;
    flag b;
    C_a_c c;
    struct {
        unsigned int b:1;
        unsigned int c:1;
    } exist;
} C_a;

#define C_a_REQUIRED_BYTES_FOR_ENCODING       22 
#define C_a_REQUIRED_BITS_FOR_ENCODING        173
#define C_a_REQUIRED_BYTES_FOR_ACN_ENCODING   22 
#define C_a_REQUIRED_BITS_FOR_ACN_ENCODING    173
#define C_a_REQUIRED_BYTES_FOR_XER_ENCODING   200

void C_a_Initialize(C_a* pVal);
flag C_a_IsConstraintValid(const C_a* val, int* pErrCode);


typedef struct {
    C_a a;
    G b;
    C_c c;
    C_d d;
    struct {
        unsigned int a:1;
    } exist;
} C;

#define C_REQUIRED_BYTES_FOR_ENCODING       76 
#define C_REQUIRED_BITS_FOR_ENCODING        605
#define C_REQUIRED_BYTES_FOR_ACN_ENCODING   76 
#define C_REQUIRED_BITS_FOR_ACN_ENCODING    605
#define C_REQUIRED_BYTES_FOR_XER_ENCODING   388

void C_Initialize(C* pVal);
flag C_IsConstraintValid(const C* val, int* pErrCode);


typedef struct {
    enum {
        B_NONE,
        B_a_PRESENT,
        B_b_PRESENT 
    } kind;
    union {
        C a;
        D b;
    } u; 
} B;

#define B_REQUIRED_BYTES_FOR_ENCODING       76 
#define B_REQUIRED_BITS_FOR_ENCODING        607
#define B_REQUIRED_BYTES_FOR_ACN_ENCODING   76 
#define B_REQUIRED_BITS_FOR_ACN_ENCODING    607
#define B_REQUIRED_BYTES_FOR_XER_ENCODING   395

void B_Initialize(B* pVal);
flag B_IsConstraintValid(const B* val, int* pErrCode);
#ifndef ERR_B_unknown_choice_index 
#define ERR_B_unknown_choice_index		1008  /**/
#endif

typedef struct {    int nCount; 
    
    B arr[5];
} A;

#define A_REQUIRED_BYTES_FOR_ENCODING       380 
#define A_REQUIRED_BITS_FOR_ENCODING        3037
#define A_REQUIRED_BYTES_FOR_ACN_ENCODING   380 
#define A_REQUIRED_BITS_FOR_ACN_ENCODING    3037
#define A_REQUIRED_BYTES_FOR_XER_ENCODING   1972

void A_Initialize(A* pVal);
flag A_IsConstraintValid(const A* val, int* pErrCode);
#ifndef ERR_A 
#define ERR_A		1009  /*(SIZE(2 .. 5))*/
#endif

typedef struct {
    enum {
        PDU_b_NONE,
        PDU_b_a_PRESENT,
        PDU_b_b_PRESENT,
        c_PRESENT,
        d_PRESENT,
        e_PRESENT 
    } kind;
    union {
        A a;
        B b;
        C c;
        D d;
        E e;
    } u; 
} PDU_b;

#define PDU_b_REQUIRED_BYTES_FOR_ENCODING       380 
#define PDU_b_REQUIRED_BITS_FOR_ENCODING        3040
#define PDU_b_REQUIRED_BYTES_FOR_ACN_ENCODING   380 
#define PDU_b_REQUIRED_BITS_FOR_ACN_ENCODING    3040
#define PDU_b_REQUIRED_BYTES_FOR_XER_ENCODING   1987

void PDU_b_Initialize(PDU_b* pVal);
flag PDU_b_IsConstraintValid(const PDU_b* val, int* pErrCode);
#ifndef ERR_PDU_b_unknown_choice_index 
#define ERR_PDU_b_unknown_choice_index		1010  /**/
#endif

typedef struct {
    F a;
    PDU_b b;
} PDU;

#define PDU_REQUIRED_BYTES_FOR_ENCODING       384 
#define PDU_REQUIRED_BITS_FOR_ENCODING        3072
#define PDU_REQUIRED_BYTES_FOR_ACN_ENCODING   384 
#define PDU_REQUIRED_BITS_FOR_ACN_ENCODING    3072
#define PDU_REQUIRED_BYTES_FOR_XER_ENCODING   2017

void PDU_Initialize(PDU* pVal);
flag PDU_IsConstraintValid(const PDU* val, int* pErrCode);


 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

flag D_Encode(const D* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag D_Decode(D* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_c_a_Encode(const C_c_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_c_a_Decode(C_c_a* pVal, BitStream* pBitStrm, int* pErrCode);
flag E_Encode(const E* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag E_Decode(E* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_d_Encode(const C_d* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_d_Decode(C_d* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_c_Encode(const C_c* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_c_Decode(C_c* pVal, BitStream* pBitStrm, int* pErrCode);
flag F_Encode(const F* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag F_Decode(F* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_a_a_Encode(const C_a_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_a_a_Decode(C_a_a* pVal, BitStream* pBitStrm, int* pErrCode);
flag G_Encode(const G* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag G_Decode(G* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_a_c_Encode(const C_a_c* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_a_c_Decode(C_a_c* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_a_Encode(const C_a* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_a_Decode(C_a* pVal, BitStream* pBitStrm, int* pErrCode);
flag C_Encode(const C* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag C_Decode(C* pVal, BitStream* pBitStrm, int* pErrCode);
flag B_Encode(const B* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag B_Decode(B* pVal, BitStream* pBitStrm, int* pErrCode);
flag A_Encode(const A* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag A_Decode(A* pVal, BitStream* pBitStrm, int* pErrCode);
flag PDU_b_Encode(const PDU_b* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PDU_b_Decode(PDU_b* pVal, BitStream* pBitStrm, int* pErrCode);
flag PDU_Encode(const PDU* val, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);
flag PDU_Decode(PDU* pVal, BitStream* pBitStrm, int* pErrCode); 


#ifdef  __cplusplus
}
#define CHOICE_C_c_a_PRESENT	C_c::C_c_a_PRESENT
#define CHOICE_C_c_b_PRESENT	C_c::C_c_b_PRESENT
#define CHOICE_B_a_PRESENT	B::B_a_PRESENT
#define CHOICE_B_b_PRESENT	B::B_b_PRESENT
#define CHOICE_PDU_b_a_PRESENT	PDU_b::PDU_b_a_PRESENT
#define CHOICE_PDU_b_b_PRESENT	PDU_b::PDU_b_b_PRESENT
#define CHOICE_c_PRESENT	PDU_b::c_PRESENT
#define CHOICE_d_PRESENT	PDU_b::d_PRESENT
#define CHOICE_e_PRESENT	PDU_b::e_PRESENT

#endif

#endif
